{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Documents\\\\Covid-19 App\\\\Full-Stack\\\\Front-End\\\\src\\\\routes.js\";\nimport React, { useEffect, useState } from 'react';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons, Entypo } from '@expo/vector-icons';\nimport LoginScreen from \"./screens/LoginScreen\";\nimport FeedScreen from \"./screens/FeedScreen\";\nimport StatsScreen from \"./screens/StatsScreen\";\nvar Stack = createStackNavigator();\nvar Tab = createBottomTabNavigator();\n\nfunction LoggedInFlow() {\n  return React.createElement(Tab.Navigator, {\n    tabBarOptions: {\n      labelStyle: {\n        fontSize: 16\n      },\n      activeTintColor: '#75ffaf'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"Feed\",\n    component: FeedScreen,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref) {\n        var focused = _ref.focused;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"clipboard-text-outline\",\n          size: 27,\n          color: focused ? '#75ffaf' : 'gray',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 56\n          }\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Stats\",\n    component: StatsScreen,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref2) {\n        var focused = _ref2.focused;\n        return React.createElement(Entypo, {\n          name: \"line-graph\",\n          size: 27,\n          color: focused ? '#75ffaf' : 'gray',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 56\n          }\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default function () {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasToken = _useState2[0],\n      setHasToken = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingToken = _useState4[0],\n      setLoadingToken = _useState4[1];\n\n  function tryLocalLogin() {\n    var asyncUser;\n    return _regeneratorRuntime.async(function tryLocalLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 3:\n            asyncUser = _context.sent;\n            asyncUser === null ? setHasToken(false) : setHasToken(true);\n            _context.next = 11;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            setHasToken(false);\n\n          case 11:\n            _context.prev = 11;\n            setLoadingToken(false);\n            return _context.finish(11);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7, 11, 14]], Promise);\n  }\n\n  useEffect(function () {\n    tryLocalLogin();\n  }, []);\n\n  if (loadingToken === true) {\n    return null;\n  }\n\n  return React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, React.createElement(Stack.Navigator, {\n    headerMode: \"none\",\n    initialRouteName: hasToken === true ? 'Logged' : 'Login',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: LoginScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Logged\",\n    component: LoggedInFlow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/mathe/Documents/Covid-19 App/Full-Stack/Front-End/src/routes.js"],"names":["React","useEffect","useState","NavigationContainer","createStackNavigator","createBottomTabNavigator","MaterialCommunityIcons","Entypo","LoginScreen","FeedScreen","StatsScreen","Stack","Tab","LoggedInFlow","labelStyle","fontSize","activeTintColor","tabBarIcon","focused","hasToken","setHasToken","loadingToken","setLoadingToken","tryLocalLogin","AsyncStorage","getItem","asyncUser","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AsyncStorage} from 'react-native';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {createBottomTabNavigator} from '@react-navigation/bottom-tabs';\nimport {MaterialCommunityIcons, Entypo} from '@expo/vector-icons';\n\nimport LoginScreen from './screens/LoginScreen';\nimport FeedScreen from './screens/FeedScreen';\nimport StatsScreen from './screens/StatsScreen';\n\nconst Stack = createStackNavigator ();\nconst Tab = createBottomTabNavigator ();\n\nfunction LoggedInFlow () {\n    \n    return (\n        <Tab.Navigator tabBarOptions = {{\n            labelStyle: {fontSize: 16},\n            activeTintColor: '#75ffaf' }}>\n       \n            <Tab.Screen \n                name = 'Feed' \n                component = {FeedScreen} \n                options = {{tabBarIcon: ({focused}) => <MaterialCommunityIcons name = 'clipboard-text-outline' size = {27} color = {focused ? '#75ffaf' : 'gray'} />}} />\n\n            <Tab.Screen \n                name = 'Stats' \n                component = {StatsScreen} \n                options = {{tabBarIcon: ({focused}) => <Entypo name = 'line-graph' size = {27} color = {focused ? '#75ffaf' : 'gray'} /> }} />\n        \n        </Tab.Navigator>\n    )\n}\n\nexport default function () {\n    const [hasToken, setHasToken] = useState (null);\n    const [loadingToken, setLoadingToken] = useState (true);\n\n    async function tryLocalLogin () {\n        try {\n            const asyncUser = await AsyncStorage.getItem ('user');\n            asyncUser === null ? setHasToken (false) : setHasToken (true);\n        }\n\n        catch (error) {\n            console.log (error);\n            setHasToken (false);\n        }\n\n        finally {\n        setLoadingToken (false);\n        }\n    }\n\n    useEffect (() => { \n        tryLocalLogin ();\n    }, [] );\n\n    if (loadingToken === true) {\n        return null;\n    }\n\n    return (\n        <NavigationContainer>\n            <Stack.Navigator headerMode = 'none' initialRouteName = {hasToken === true ? 'Logged' : 'Login'} >\n                <Stack.Screen name = 'Login' component = {LoginScreen} />\n                <Stack.Screen name = 'Logged' component = {LoggedInFlow} />\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}